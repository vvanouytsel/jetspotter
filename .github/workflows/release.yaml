name: 'Release'
permissions:
  contents: write
  packages: write
on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-22.04
    name: Run tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Run tests
        shell: bash
        run: |
          go test ./internal/... --count 1

  check:
    name: Check release required
    needs: [test]
    runs-on: ubuntu-22.04
    outputs:
      new_release_version: ${{ steps.check_semantic.outputs.new_release_version }}
      new_release_notes: ${{ steps.check_semantic.outputs.new_release_notes }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install conventional-changelog-conventionalcommits
        run: npm install conventional-changelog-conventionalcommits@~7.0.0

      - name: Check semantic release
        id: check_semantic
        uses: cycjimmy/semantic-release-action@v3
        with:
          semantic_version: 19.0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    needs: [check]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        os: [darwin, linux, windows]
        architecture: [arm64, amd64]
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - uses: actions/checkout@v3

      - name: Build
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.architecture }}
        id: build
        run: |
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
          VERSION=${{ needs.check.outputs.new_release_version || 'dev' }}
          COMMIT=$(git rev-parse --short HEAD)
          
          go build -o jetspotter-${{ matrix.os }}-${{ matrix.architecture }} \
            -ldflags "-X jetspotter/internal/version.Version=${VERSION} \
                      -X jetspotter/internal/version.Commit=${COMMIT} \
                      -X jetspotter/internal/version.BuildTime=${BUILD_TIME}" \
            cmd/jetspotter/jetspotter.go

      - uses: actions/upload-artifact@v4
        name: Upload artifact
        with:
          name: "jetspotter-${{ matrix.os }}-${{ matrix.architecture }}"
          path: jetspotter-${{ matrix.os }}-${{ matrix.architecture }}

  image:
    name: Push container image and helm chart
    runs-on: ubuntu-latest
    needs: [check, build]
    env:
      REGISTRY: ghcr.io
    if: needs.check.outputs.new_release_version
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set build time environment variable
        run: echo "BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          build-args: |
            VERSION=${{ needs.check.outputs.new_release_version }}
            COMMIT=${{ github.sha }}
            BUILD_TIME=${{ env.BUILD_TIME }}
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:latest,${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.check.outputs.new_release_version }}

      - name: Package and push helm chart
        run: |
          helm package helm/jetspotter --version ${{ needs.check.outputs.new_release_version }} --app-version ${{ needs.check.outputs.new_release_version }} 
          helm push jetspotter-${{ needs.check.outputs.new_release_version }}.tgz oci://${{ env.REGISTRY }}/${{ github.repository }}-chart
  
  release:
    name: Create release
    needs: [check,image]
    if: needs.check.outputs.new_release_version
    runs-on: [ubuntu-22.04]
    steps:
      - run: mkdir artifacts
      - uses: actions/download-artifact@v4
        name: Download artifact
        with:
          path: artifacts

      - run: ls -ltr artifacts/jetspotter-*/*

      - name: Create the release
        uses: ncipollo/release-action@v1
        id: release
        with:
          artifacts: artifacts/jetspotter-*/*
          name: ${{ needs.check.outputs.new_release_version }}
          body: ${{ needs.check.outputs.new_release_notes }}
          tag: ${{ needs.check.outputs.new_release_version }}
          token: ${{ secrets.GITHUB_TOKEN }}

  notification:
    name: Send notification on failure
    needs: [build, release, image]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send alert to slack
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Jetspotter failed build",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|GitHub action> for jetspotter failed"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_GOOSE }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
